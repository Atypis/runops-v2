import SOPExecutor from './sop-executor.js';

/**
 * Test Gmail Steps from Stagehand-optimized SOP
 * 
 * This tests the atomic Gmail steps that were generated by our giga-optimized prompt
 */

// Sample Gmail steps from the generated SOP (atomic granularity)
const gmailSteps = [
  {
    "id": "step_1",
    "type": "task",
    "label": "Navigate to Gmail",
    "stagehand_instruction": "Navigate to https://gmail.com",
    "confidence_level": "high",
    "error_recovery": [
      "Wait for page to load completely",
      "Check if already logged in"
    ]
  },
  {
    "id": "step_2", 
    "type": "decision",
    "label": "Check if logged into Gmail",
    "stagehand_instruction": "Check if the Gmail interface is visible with inbox, compose button, and user profile. Return true if logged in, false if on login page.",
    "confidence_level": "high"
  },
  {
    "id": "step_3",
    "type": "task", 
    "label": "Click Compose button",
    "stagehand_instruction": "Click the 'Compose' button to start a new email",
    "confidence_level": "high",
    "error_recovery": [
      "Look for compose button in sidebar",
      "Try clicking the '+' icon if compose button not found"
    ]
  },
  {
    "id": "step_4",
    "type": "task",
    "label": "Enter recipient email",
    "stagehand_instruction": "Click in the 'To' field and type 'test@example.com'",
    "confidence_level": "high",
    "error_recovery": [
      "Click on the recipient field if not focused",
      "Clear any existing text first"
    ]
  },
  {
    "id": "step_5",
    "type": "task",
    "label": "Enter email subject",
    "stagehand_instruction": "Click in the 'Subject' field and type 'Test Email from Stagehand'",
    "confidence_level": "high"
  },
  {
    "id": "step_6",
    "type": "task",
    "label": "Enter email body",
    "stagehand_instruction": "Click in the email body area and type 'This is a test email sent using Stagehand automation.'",
    "confidence_level": "high"
  },
  {
    "id": "step_7",
    "type": "extract",
    "label": "Extract compose window details",
    "extract_instruction": "Extract the current state of the compose window including recipient, subject, and body text",
    "extract_schema": "z.object({ recipient: z.string(), subject: z.string(), bodyText: z.string() })",
    "confidence_level": "medium"
  }
];

async function testGmailSteps() {
  const executor = new SOPExecutor();
  
  try {
    console.log('🧪 Testing Gmail Steps from Stagehand-optimized SOP\n');
    console.log('=' .repeat(60));
    
    await executor.init();
    
    // Execute the Gmail steps
    const results = await executor.executeSteps(gmailSteps);
    
    // Print execution summary
    console.log('\n' + '='.repeat(60));
    console.log('📊 EXECUTION SUMMARY');
    console.log('='.repeat(60));
    
    const summary = executor.getExecutionSummary();
    console.log(`Total Steps: ${summary.total}`);
    console.log(`Successful: ${summary.successful}`);
    console.log(`Failed: ${summary.failed}`);
    console.log(`Success Rate: ${summary.successRate}%`);
    console.log(`Average Duration: ${summary.avgDuration}ms`);
    
    console.log('\n📋 DETAILED LOG:');
    summary.log.forEach((entry, index) => {
      const status = entry.success ? '✅' : '❌';
      console.log(`${index + 1}. ${status} ${entry.label} (${entry.duration}ms)`);
      if (entry.error) {
        console.log(`   Error: ${entry.error}`);
      }
      if (entry.result && entry.result.data) {
        console.log(`   Data: ${JSON.stringify(entry.result.data, null, 2)}`);
      }
    });

    console.log('\n🎯 EXTRACTED VARIABLES:');
    console.log(JSON.stringify(executor.variables, null, 2));
    
  } catch (error) {
    console.error('💥 Test failed:', error);
  } finally {
    await executor.close();
  }
}

// Run the test
testGmailSteps().catch(console.error); 