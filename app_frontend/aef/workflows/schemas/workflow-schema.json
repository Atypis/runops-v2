{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AEF Workflow Schema",
  "description": "Schema for AEF (Autonomous Execution Framework) workflows",
  "type": "object",
  "required": ["meta", "execution"],
  "properties": {
    "meta": {
      "type": "object",
      "required": ["id", "title", "version"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique workflow identifier"
        },
        "title": {
          "type": "string",
          "description": "Human readable workflow name"
        },
        "version": {
          "type": "string",
          "pattern": "^\\d+\\.\\d+(\\.\\d+)?$",
          "description": "Semantic version (e.g., 1.0.0)"
        },
        "goal": {
          "type": "string",
          "description": "High-level goal of the workflow"
        },
        "purpose": {
          "type": "string",
          "description": "Detailed purpose description"
        },
        "owner": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of workflow owners"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "description": "Creation timestamp"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "description": "Last update timestamp"
        },
        "aiGenerated": {
          "type": "boolean",
          "default": false,
          "description": "Whether this workflow was AI-generated"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Categorization tags"
        }
      }
    },
    "execution": {
      "type": "object",
      "required": ["workflow"],
      "properties": {
        "environment": {
          "type": "object",
          "properties": {
            "required_tabs": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["name", "url"],
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  }
                }
              }
            }
          }
        },
        "workflow": {
          "type": "object",
          "required": ["nodes", "flow"],
          "properties": {
            "nodes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/workflowNode"
              }
            },
            "flow": {
              "type": "array",
              "items": {
                "type": "object",
                "required": ["from", "to"],
                "properties": {
                  "from": {
                    "type": "string"
                  },
                  "to": {
                    "type": "string"
                  },
                  "condition": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "config": {
      "type": "object",
      "properties": {
        "executionTimeout": {
          "type": "integer",
          "minimum": 1,
          "description": "Max execution time in seconds"
        },
        "retryAttempts": {
          "type": "integer",
          "minimum": 0,
          "description": "Number of retry attempts for failed actions"
        },
        "hybridMode": {
          "type": "boolean",
          "default": true,
          "description": "Use cached selectors with AI fallback"
        },
        "pauseOnErrors": {
          "type": "boolean",
          "default": true,
          "description": "Pause execution on errors"
        }
      }
    }
  },
  "definitions": {
    "workflowNode": {
      "type": "object",
      "required": ["id", "type", "label", "intent"],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique node identifier"
        },
        "type": {
          "type": "string",
          "enum": ["atomic_task", "compound_task", "iterative_loop", "decision", "assert", "error_handler", "data_transform", "filter_list", "generator", "explore"],
          "description": "Type of workflow node"
        },
        "label": {
          "type": "string",
          "description": "Human readable node name"
        },
        "intent": {
          "type": "string",
          "description": "What this node accomplishes"
        },
        "context": {
          "type": "string",
          "description": "Additional context about the node"
        },
        "parentId": {
          "type": "string",
          "description": "Parent node ID for hierarchical nodes"
        },
        "children": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Child node IDs"
        },
        "canExecuteAsGroup": {
          "type": "boolean",
          "description": "Whether compound tasks can execute all children"
        },
        "credentialsRequired": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": "Required credentials by service"
        },
        "preferredAuthMethods": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": "Preferred authentication methods by service"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/workflowAction"
          }
        },
        "retryPolicy": {
          "$ref": "#/definitions/retryPolicy"
        },
        "conditionSchema": {
          "type": "object",
          "description": "Schema for decision node conditions"
        },
        "outboundEdges": {
          "type": "object",
          "properties": {
            "Y": { "type": "string" },
            "N": { "type": "string" }
          },
          "description": "Decision node outbound edges"
        },
        "assertConditions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["selectorVisible", "urlMatch", "textPresent"] },
              "value": { "type": "string" }
            }
          }
        },
        "fallbackAction": {
          "type": "string",
          "description": "Fallback action for error handler"
        },
        "humanEscalate": {
          "type": "boolean",
          "description": "Whether to escalate to human on error"
        },
        "transformFunction": {
          "type": "string",
          "description": "JavaScript function for data transformation"
        },
        "maxActions": {
          "type": "integer",
          "minimum": 1,
          "maximum": 10,
          "description": "Maximum actions for explore node"
        },
        "inputKey": {
          "type": "string",
          "description": "Input state key for filter_list nodes"
        },
        "outputKey": {
          "type": "string",
          "description": "Output state key for filter_list nodes"
        },
        "batchSize": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "description": "Batch size for filter_list processing"
        },
        "promptTemplate": {
          "type": "string",
          "description": "LLM prompt template for filter_list nodes"
        }
      }
    },
    "workflowAction": {
      "type": "object",
      "required": ["type", "instruction"],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "navigate",
            "navigate_or_switch_tab", 
            "click",
            "type",
            "wait",
            "wait_for_navigation",
            "act",
            "extract",
            "visual_scan",
            "conditional_auth",
            "observe",
            "clear_memory",
            "label_email",
            "paginate_extract",
            "extract_list",
            "filter_list",
            "list_iterator",
            "assert_element",
            "update_row",
            "create_row",
            "record_search_or_upsert"
          ]
        },
        "instruction": {
          "type": "string",
          "description": "Human readable instruction for the action"
        },
        "target": {
          "type": "object",
          "properties": {
            "url": {
              "type": "string"
            },
            "selector": {
              "type": "string"
            },
            "url_contains": {
              "type": "string"
            }
          }
        },
        "data": {
          "type": "object",
          "description": "Action-specific data"
        },
        "timeout": {
          "type": "integer",
          "minimum": 0
        },
        "schema": {
          "type": "object",
          "description": "Data extraction schema"
        },
        "credentialField": {
          "type": "string",
          "description": "Credential field this action uses"
        },
        "useVision": {
          "type": "string",
          "enum": ["always", "fallback", "false"],
          "default": "fallback"
        },
        "retryPolicy": {
          "$ref": "#/definitions/retryPolicy"
        },
        "listConfig": {
          "$ref": "#/definitions/listConfig"
        },
        "iteratorConfig": {
          "$ref": "#/definitions/iteratorConfig"
        },
        "assertConfig": {
          "$ref": "#/definitions/assertConfig"
        },
        "rowConfig": {
          "$ref": "#/definitions/rowConfig"
        }
      },
      "allOf": [
        { "if": { "properties": { "type": { "const": "extract_list" } } }, "then": { "required": ["listConfig"], "not": { "anyOf": [ { "required": ["rowConfig"] }, { "required": ["assertConfig"] }, { "required": ["iteratorConfig"] } ] } } },
        { "if": { "properties": { "type": { "const": "filter_list" } } }, "then": { "anyOf": [ { "required": ["listConfig"] }, { "allOf": [ { "required": ["inputKey", "outputKey"] }, { "not": { "anyOf": [ { "required": ["rowConfig"] }, { "required": ["assertConfig"] }, { "required": ["iteratorConfig"] } ] } } ] } ], "not": { "anyOf": [ { "required": ["rowConfig"] }, { "required": ["assertConfig"] }, { "required": ["iteratorConfig"] } ] } } },
        { "if": { "properties": { "type": { "const": "list_iterator" } } }, "then": { "required": ["iteratorConfig"], "not": { "anyOf": [ { "required": ["rowConfig"] }, { "required": ["assertConfig"] }, { "required": ["listConfig"] } ] } } },
        { "if": { "properties": { "type": { "const": "assert_element" } } }, "then": { "required": ["assertConfig"], "not": { "anyOf": [ { "required": ["rowConfig"] }, { "required": ["listConfig"] }, { "required": ["iteratorConfig"] } ] } } },
        { "if": { "properties": { "type": { "const": "update_row" } } }, "then": { "required": ["rowConfig"], "not": { "anyOf": [ { "required": ["listConfig"] }, { "required": ["assertConfig"] }, { "required": ["iteratorConfig"] } ] } } },
        { "if": { "properties": { "type": { "const": "create_row" } } }, "then": { "required": ["rowConfig"], "not": { "anyOf": [ { "required": ["listConfig"] }, { "required": ["assertConfig"] }, { "required": ["iteratorConfig"] } ] } } },
        { "if": { "properties": { "type": { "const": "record_search_or_upsert" } } }, "then": { "required": ["rowConfig"], "not": { "anyOf": [ { "required": ["listConfig"] }, { "required": ["assertConfig"] }, { "required": ["iteratorConfig"] } ] } } },
        { "if": { "properties": { "type": { "enum": ["navigate", "click", "type", "wait", "wait_for_navigation", "act", "visual_scan", "observe", "clear_memory", "label_email", "paginate_extract"] } } }, "then": { "not": { "anyOf": [ { "required": ["rowConfig"] }, { "required": ["listConfig"] }, { "required": ["assertConfig"] }, { "required": ["iteratorConfig"] } ] } } }
      ]
    },
    "retryPolicy": {
      "type": "object",
      "properties": {
        "max": {
          "type": "integer",
          "minimum": 0,
          "default": 3
        },
        "backoffMs": {
          "type": "array",
          "items": {
            "type": "integer",
            "minimum": 0
          },
          "default": [0, 1000, 3000]
        },
        "circuitBreaker": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "listConfig": {
      "type": "object",
      "description": "Configuration for list-based actions (extract_list, filter_list)",
      "properties": {
        "scrollStrategy": {
          "type": "string",
          "enum": ["auto", "manual", "infinite"],
          "default": "auto",
          "description": "How to handle scrolling for list extraction"
        },
        "maxItems": {
          "type": "integer",
          "minimum": 1,
          "default": 100,
          "description": "Maximum number of items to extract"
        },
        "deduplication": {
          "type": "boolean",
          "default": true,
          "description": "Remove duplicate items from list"
        },
        "itemSelector": {
          "type": "string",
          "description": "CSS selector for individual list items"
        },
        "nextPageSelector": {
          "type": "string",
          "description": "CSS selector for next page button"
        },
        "filterCriteria": {
          "type": "object",
          "description": "Criteria for filtering list items",
          "properties": {
            "includeKeywords": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Keywords that must be present"
            },
            "excludeKeywords": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Keywords that must not be present"
            },
            "dateRange": {
              "type": "object",
              "properties": {
                "start": { "type": "string", "format": "date" },
                "end": { "type": "string", "format": "date" }
              },
              "description": "Date range filter"
            }
          }
        },
        "inputKey": {
          "type": "string",
          "description": "Input state key for filter_list (source data)"
        },
        "outputKey": {
          "type": "string",
          "description": "Output state key for filter_list (filtered results)"
        },
        "batchSize": {
          "type": "integer",
          "minimum": 1,
          "maximum": 100,
          "default": 25,
          "description": "Batch size for filter_list LLM processing"
        },
        "promptTemplate": {
          "type": "string",
          "description": "LLM prompt template for filter_list decisions"
        }
      }
    },
    "iteratorConfig": {
      "type": "object",
      "description": "Configuration for list_iterator action",
      "properties": {
        "listVariable": {
          "type": "string",
          "description": "Variable name containing the list to iterate"
        },
        "itemVariable": {
          "type": "string",
          "default": "currentItem",
          "description": "Variable name for current iteration item"
        },
        "indexVariable": {
          "type": "string",
          "default": "currentIndex",
          "description": "Variable name for current iteration index"
        },
        "maxIterations": {
          "type": "integer",
          "minimum": 1,
          "default": 1000,
          "description": "Maximum number of iterations to prevent infinite loops"
        },
        "continueOnError": {
          "type": "boolean",
          "default": false,
          "description": "Continue iteration if single item processing fails"
        },
        "batchSize": {
          "type": "integer",
          "minimum": 1,
          "default": 1,
          "description": "Number of items to process in each batch"
        }
      },
      "required": ["listVariable"]
    },
    "assertConfig": {
      "type": "object",
      "description": "Configuration for assert_element action",
      "properties": {
        "assertionType": {
          "type": "string",
          "enum": ["exists", "visible", "hidden", "enabled", "disabled", "contains_text", "has_attribute", "count"],
          "description": "Type of assertion to perform"
        },
        "selector": {
          "type": "string",
          "description": "CSS selector for element to assert"
        },
        "expectedText": {
          "type": "string",
          "description": "Expected text content (for contains_text assertion)"
        },
        "expectedAttribute": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "value": { "type": "string" }
          },
          "description": "Expected attribute name and value"
        },
        "expectedCount": {
          "type": "integer",
          "minimum": 0,
          "description": "Expected number of matching elements"
        },
        "timeout": {
          "type": "integer",
          "minimum": 0,
          "default": 10000,
          "description": "Timeout in milliseconds"
        },
        "failureAction": {
          "type": "string",
          "enum": ["stop", "continue", "retry", "escalate"],
          "default": "stop",
          "description": "Action to take if assertion fails"
        }
      },
      "required": ["assertionType", "selector"]
    },
    "rowConfig": {
      "type": "object",
      "description": "Configuration for row-based actions (update_row, create_row)",
      "properties": {
        "tableName": {
          "type": "string",
          "description": "Name of the table/sheet to operate on"
        },
        "searchCriteria": {
          "type": "object",
          "description": "Criteria for finding existing rows (update_row only)",
          "properties": {
            "primaryKey": {
              "type": "string",
              "description": "Primary key field name"
            },
            "searchFields": {
              "type": "array",
              "items": { "type": "string" },
              "description": "Fields to search for matching records"
            },
            "fuzzyMatch": {
              "type": "boolean",
              "default": false,
              "description": "Enable fuzzy matching for text fields"
            },
            "matchThreshold": {
              "type": "number",
              "minimum": 0,
              "maximum": 1,
              "default": 0.8,
              "description": "Similarity threshold for fuzzy matching"
            }
          }
        },
        "fieldMapping": {
          "type": "object",
          "description": "Mapping of variable names to table fields",
          "additionalProperties": {
            "type": "string"
          }
        },
        "upsertStrategy": {
          "type": "string",
          "enum": ["create_only", "update_only", "create_or_update"],
          "default": "create_or_update",
          "description": "Strategy for handling existing records"
        },
        "requiredFields": {
          "type": "array",
          "items": { "type": "string" },
          "description": "Fields that must be populated"
        },
        "defaultValues": {
          "type": "object",
          "description": "Default values for fields",
          "additionalProperties": true
        }
      }
    }
  }
} 